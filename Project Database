CREATE DATABASE OnlineLearningPlatform;
USE OnlineLearningPlatform;
-- User Table
CREATE TABLE Users (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(50) NOT NULL,
    Password VARCHAR(50) NOT NULL,
    Email VARCHAR(100) NOT NULL,
    Role ENUM('Student', 'Instructor') NOT NULL
);

-- Course Table
CREATE TABLE Courses (
    CourseID INT PRIMARY KEY AUTO_INCREMENT,
    CourseName VARCHAR(100) NOT NULL,
    Description TEXT NOT NULL,
    InstructorID INT,
    FOREIGN KEY (InstructorID) REFERENCES Users(UserID)
);

-- Enrollment Table
CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    CourseID INT,
    EnrollmentDate DATE NOT NULL,
    FOREIGN KEY (User ID) REFERENCES Users(UserID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

-- Assignment Table
CREATE TABLE Assignments (
    AssignmentID INT PRIMARY KEY AUTO_INCREMENT,
    CourseID INT,
    Title VARCHAR(100) NOT NULL,
    DueDate DATE NOT NULL,
    Description TEXT NOT NULL,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

-- Grade Table
CREATE TABLE Grades (
    GradeID INT PRIMARY KEY AUTO_INCREMENT,
    AssignmentID INT,
    UserID INT,
    Score DECIMAL(5,2),
    FOREIGN KEY (AssignmentID) REFERENCES Assignments(AssignmentID),
    FOREIGN KEY (User ID) REFERENCES Users(UserID)
);
-- Insert sample data into Users
INSERT INTO Users (Username, Password, Email, Role) VALUES
('jdoe', 'password1', 'jdoe@example.com', 'Student'),
('asmith', 'password2', 'asmith@example.com', 'Instructor'),
('bwhite', 'password3', 'bwhite@example.com', 'Student');

-- Insert sample data into Courses
INSERT INTO Courses (CourseName, Description, InstructorID) VALUES
('Introduction to DB', 'Basics of Database Systems', 2),
('Advanced Java', 'Deep dive into Java', 2);

-- Insert sample data into Enrollments
INSERT INTO Enrollments (User ID, CourseID, EnrollmentDate) VALUES
(1, 101, '2023-09-01'),
(1, 102, '2023-09-02'),
(3, 101, '2023-09-01');

-- Insert sample data into Assignments
INSERT INTO Assignments (CourseID, Title, DueDate, Description) VALUES
(101, 'DB Project', '2023-09-15', 'Create a simple database'),
(102, 'Java Assignment 1', '2023-09-20', 'Implement a Java program');

-- Insert sample data into Grades
INSERT INTO Grades (AssignmentID, UserID, Score) VALUES
(1, 1, 85),
(1, 3, 90),
(2, 1, 78);
-- Stored Procedure for Inserting or Updating Data
DELIMITER //
CREATE PROCEDURE UpsertUser (
    IN p_UserID INT,
    IN p_Username VARCHAR(50),
    IN p_Password VARCHAR(50),
    IN p_Email VARCHAR(100),
    IN p_Role ENUM('Student', 'Instructor')
)
BEGIN
    IF p_UserID IS NULL THEN
        INSERT INTO Users (Username, Password, Email, Role) VALUES (p_Username, p_Password, p_Email, p_Role);
    ELSE
        UPDATE Users SET Username = p_Username, Password = p_Password, Email = p_Email, Role = p_Role WHERE UserID = p_UserID;
    END IF;
END //
DELIMITER ;

-- Stored Procedure for Retrieving Data
DELIMITER //
CREATE PROCEDURE GetUser Courses(IN p_UserID INT)
BEGIN
    SELECT c.CourseName, c.Description
    FROM Courses c
    JOIN Enrollments e ON c.CourseID = e.CourseID
    WHERE e.UserID = p_UserID;
END //
DELIMITER ;

-- Stored Procedure for Deleting Data
DELIMITER //
CREATE PROCEDURE DeleteUser (IN p_UserID INT)
BEGIN
    DELETE FROM Users WHERE UserID = p_UserID;
END //
DELIMITER ;
-- View for Summarizing User Enrollments
CREATE VIEW UserEnrollments AS
SELECT u.Username, c.CourseName, e.EnrollmentDate
FROM Users u
JOIN Enrollments e ON u.UserID = e.UserID
JOIN Courses c ON e.Course
